{"version":3,"file":"./js/main.js","mappings":";;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;ACAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,qBAAqB;AAChD;AACA,yBAAyB,0BAA0B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,qBAAqB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,qBAAqB;AAChD;AACA,yBAAyB,sDAAsD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AC/GA;AACA,EAAE,KAA4D;AAC9D,EAAE,CAC4D;AAC9D,CAAC,qBAAqB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,cAAc;AAC3B,aAAa,QAAQ;AACrB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB,cAAc,mBAAmB;AACjC;AACA;AACA;AACA;AACA,0BAA0B,mBAAmB;AAC7C;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,WAAW;AACxB,aAAa,MAAM;AACnB,cAAc,SAAS;AACvB;AACA;AACA,oBAAoB,qBAAqB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,iBAAiB;AAC9B,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,4BAA4B;AACzC,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,kBAAkB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA,0BAA0B,kBAAkB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,aAAa,oBAAoB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,4CAA4C;AACtE,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,oCAAoC,WAAW;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,6BAA6B;AACzE;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E;AAC5E;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,gCAAgC;AAChC;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,iCAAiC;AACrD;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,uBAAuB;AACvB,sBAAsB,qBAAqB;AAC3C;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,6BAA6B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,yBAAyB;AACtD;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,+BAA+B;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,kCAAkC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB,cAAc,SAAS;AACvB;AACA;AACA;AACA,2BAA2B,kCAAkC;AAC7D;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA,+DAA+D;AAC/D;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA,0CAA0C,WAAW;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,4BAA4B;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,aAAa,qBAAqB;AAClC,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,qBAAqB;AAClC;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,aAAa;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,WAAW;AAC5C;AACA,8BAA8B,SAAS;AACvC;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA,0EAA0E;AAC1E;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;;;;ACj2B0C;AAC3C;AACA;AACA;AACA;AACA;AACe;AACf;AACA;AACA,aAAa,aAAa;AAC1B,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,WAAW;AACX,WAAW;AACX,aAAa;AACb,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,aAAa;AACb,eAAe,kBAAkB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,MAAM;AACvD;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,uBAAuB;AACvB;AACA,UAAU,8DAAsB;AAChC;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,WAAW;AACX,aAAa;AACb,eAAe;AACf;AACA;AACA;AACA,+CAA+C,MAAM;AACrD;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,eAAe,QAAQ,4BAA4B,YAAY;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,eAAe;AACf;AACA;AACA;AACA,+CAA+C,MAAM;AACrD;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,aAAa,aAAa;AAC1B,eAAe;AACf;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,aAAa;AAC1B,aAAa,QAAQ;AACrB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACzJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,aAAa;AAC1B,aAAa,kBAAkB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,aAAa;AACb,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,aAAa;AACb,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,eAAe;AACf;AACA;AACA;AACA;AACA,4BAA4B,iBAAiB;AAC7C;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,aAAa;AAC1B,aAAa,kBAAkB;AAC/B;AACA,aAAa,QAAQ;AACrB,aAAa,gBAAgB;AAC7B,aAAa,QAAQ;AACrB,aAAa,aAAa;AAC1B,aAAa,qBAAqB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,aAAa;AACb,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,aAAa;AACb,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,aAAa,aAAa;AAC1B,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,aAAa;AAC1B,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,aAAa;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACvOA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAO,CAAC,2DAAmB;AACnD;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;UC9GA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;ACN8B;AACsB;AACd;AACC;AACgB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,WAAW,gBAAgB;AAC3B,aAAa;AACb;AACA;AACA;AACA,yEAAyE,MAAM;AAC/E;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,2DAAmB;AAC9D;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,gDAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,oDAAW;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,gDAAa;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,qDAAS;AACf,CAAC;AACD;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,oDAAW;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,+DAAuB;AAC3B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,+DAAuB;AACzB,CAAC,E","sources":["webpack://altai/./src/styles/style.scss?6033","webpack://altai/./src/scripts/accordion.js","webpack://altai/./src/scripts/dialog-polyfill.js","webpack://altai/./src/scripts/form.js","webpack://altai/./src/scripts/gallery.js","webpack://altai/./src/scripts/modals.js","webpack://altai/webpack/bootstrap","webpack://altai/webpack/runtime/define property getters","webpack://altai/webpack/runtime/hasOwnProperty shorthand","webpack://altai/webpack/runtime/make namespace object","webpack://altai/./src/scripts/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","export default class Accordion {\r\n  constructor(el) {\r\n    // Store the <details> element\r\n    this.el = el;\r\n    // Store the <summary> element\r\n    this.summary = el.querySelector('summary');\r\n    // Store the <div class=\"content\"> element\r\n    this.content = el.querySelector('.faq__answer');\r\n\r\n    // Store the animation object (so we can cancel it if needed)\r\n    this.animation = null;\r\n    // Store if the element is closing\r\n    this.isClosing = false;\r\n    // Store if the element is expanding\r\n    this.isExpanding = false;\r\n    // Detect user clicks on the summary element\r\n    this.summary.addEventListener('click', (e) => this.onClick(e));\r\n  }\r\n\r\n  onClick(e) {\r\n    // Stop default behaviour from the browser\r\n    e.preventDefault();\r\n    // Add an overflow on the <details> to avoid content overflowing\r\n    this.el.style.overflow = 'hidden';\r\n    // Check if the element is being closed or is already closed\r\n    if (this.isClosing || !this.el.open) {\r\n      this.open();\r\n    // Check if the element is being openned or is already open\r\n    } else if (this.isExpanding || this.el.open) {\r\n      this.shrink();\r\n    }\r\n  }\r\n\r\n  shrink() {\r\n    // Set the element as \"being closed\"\r\n    this.isClosing = true;\r\n    \r\n    // Store the current height of the element\r\n    const startHeight = `${this.el.offsetHeight}px`;\r\n    // Calculate the height of the summary\r\n    const endHeight = `${this.summary.offsetHeight}px`;\r\n    \r\n    // If there is already an animation running\r\n    if (this.animation) {\r\n      // Cancel the current animation\r\n      this.animation.cancel();\r\n    }\r\n    \r\n    // Start a WAAPI animation\r\n    this.animation = this.el.animate({\r\n      // Set the keyframes from the startHeight to endHeight\r\n      height: [startHeight, endHeight]\r\n    }, {\r\n      duration: 300,\r\n      easing: 'ease-out'\r\n    });\r\n    \r\n    // When the animation is complete, call onAnimationFinish()\r\n    this.animation.onfinish = () => this.onAnimationFinish(false);\r\n    // If the animation is cancelled, isClosing variable is set to false\r\n    this.animation.oncancel = () => this.isClosing = false;\r\n  }\r\n\r\n  open() {\r\n    // Apply a fixed height on the element\r\n    this.el.style.height = `${this.el.offsetHeight}px`;\r\n    // Force the [open] attribute on the details element\r\n    this.el.open = true;\r\n    // Wait for the next frame to call the expand function\r\n    window.requestAnimationFrame(() => this.expand());\r\n  }\r\n\r\n  expand() {\r\n    // Set the element as \"being expanding\"\r\n    this.isExpanding = true;\r\n    // Get the current fixed height of the element\r\n    const startHeight = `${this.el.offsetHeight}px`;\r\n    // Calculate the open height of the element (summary height + content height)\r\n    const endHeight = `${this.summary.clientHeight + this.content.clientHeight}px`;\r\n    \r\n    // If there is already an animation running\r\n    if (this.animation) {\r\n      // Cancel the current animation\r\n      this.animation.cancel();\r\n    }\r\n    \r\n    // Start a WAAPI animation\r\n    this.animation = this.el.animate({\r\n      // Set the keyframes from the startHeight to endHeight\r\n      height: [startHeight, endHeight]\r\n    }, {\r\n      duration: 300,\r\n      easing: 'ease-out'\r\n    });\r\n    // When the animation is complete, call onAnimationFinish()\r\n    this.animation.onfinish = () => this.onAnimationFinish(true);\r\n    // If the animation is cancelled, isExpanding variable is set to false\r\n    this.animation.oncancel = () => this.isExpanding = false;\r\n  }\r\n\r\n  onAnimationFinish(open) {\r\n    // Set the open attribute based on the parameter\r\n    this.el.open = open;\r\n    // Clear the stored animation\r\n    this.animation = null;\r\n    // Reset isClosing & isExpanding\r\n    this.isClosing = false;\r\n    this.isExpanding = false;\r\n    // Remove the overflow hidden and the fixed height\r\n    this.el.style.height = this.el.style.overflow = '';\r\n  }\r\n}","(function (global, factory) {\r\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\r\n  typeof define === 'function' && define.amd ? define(factory) :\r\n  (global = global || self, global.dialogPolyfill = factory());\r\n}(this, function () { 'use strict';\r\n\r\n  // nb. This is for IE10 and lower _only_.\r\n  var supportCustomEvent = window.CustomEvent;\r\n  if (!supportCustomEvent || typeof supportCustomEvent === 'object') {\r\n    supportCustomEvent = function CustomEvent(event, x) {\r\n      x = x || {};\r\n      var ev = document.createEvent('CustomEvent');\r\n      ev.initCustomEvent(event, !!x.bubbles, !!x.cancelable, x.detail || null);\r\n      return ev;\r\n    };\r\n    supportCustomEvent.prototype = window.Event.prototype;\r\n  }\r\n\r\n  /**\r\n   * Dispatches the passed event to both an \"on<type>\" handler as well as via the\r\n   * normal dispatch operation. Does not bubble.\r\n   *\r\n   * @param {!EventTarget} target\r\n   * @param {!Event} event\r\n   * @return {boolean}\r\n   */\r\n  function safeDispatchEvent(target, event) {\r\n    var check = 'on' + event.type.toLowerCase();\r\n    if (typeof target[check] === 'function') {\r\n      target[check](event);\r\n    }\r\n    return target.dispatchEvent(event);\r\n  }\r\n\r\n  /**\r\n   * @param {Element} el to check for stacking context\r\n   * @return {boolean} whether this el or its parents creates a stacking context\r\n   */\r\n  function createsStackingContext(el) {\r\n    while (el && el !== document.body) {\r\n      var s = window.getComputedStyle(el);\r\n      var invalid = function(k, ok) {\r\n        return !(s[k] === undefined || s[k] === ok);\r\n      };\r\n\r\n      if (s.opacity < 1 ||\r\n          invalid('zIndex', 'auto') ||\r\n          invalid('transform', 'none') ||\r\n          invalid('mixBlendMode', 'normal') ||\r\n          invalid('filter', 'none') ||\r\n          invalid('perspective', 'none') ||\r\n          s['isolation'] === 'isolate' ||\r\n          s.position === 'fixed' ||\r\n          s.webkitOverflowScrolling === 'touch') {\r\n        return true;\r\n      }\r\n      el = el.parentElement;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Finds the nearest <dialog> from the passed element.\r\n   *\r\n   * @param {Element} el to search from\r\n   * @return {HTMLDialogElement} dialog found\r\n   */\r\n  function findNearestDialog(el) {\r\n    while (el) {\r\n      if (el.localName === 'dialog') {\r\n        return /** @type {HTMLDialogElement} */ (el);\r\n      }\r\n      if (el.parentElement) {\r\n        el = el.parentElement;\r\n      } else if (el.parentNode) {\r\n        el = el.parentNode.host;\r\n      } else {\r\n        el = null;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Blur the specified element, as long as it's not the HTML body element.\r\n   * This works around an IE9/10 bug - blurring the body causes Windows to\r\n   * blur the whole application.\r\n   *\r\n   * @param {Element} el to blur\r\n   */\r\n  function safeBlur(el) {\r\n    // Find the actual focused element when the active element is inside a shadow root\r\n    while (el && el.shadowRoot && el.shadowRoot.activeElement) {\r\n      el = el.shadowRoot.activeElement;\r\n    }\r\n\r\n    if (el && el.blur && el !== document.body) {\r\n      el.blur();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {!NodeList} nodeList to search\r\n   * @param {Node} node to find\r\n   * @return {boolean} whether node is inside nodeList\r\n   */\r\n  function inNodeList(nodeList, node) {\r\n    for (var i = 0; i < nodeList.length; ++i) {\r\n      if (nodeList[i] === node) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @param {HTMLFormElement} el to check\r\n   * @return {boolean} whether this form has method=\"dialog\"\r\n   */\r\n  function isFormMethodDialog(el) {\r\n    if (!el || !el.hasAttribute('method')) {\r\n      return false;\r\n    }\r\n    return el.getAttribute('method').toLowerCase() === 'dialog';\r\n  }\r\n\r\n  /**\r\n   * @param {!DocumentFragment|!Element} hostElement\r\n   * @return {?Element}\r\n   */\r\n  function findFocusableElementWithin(hostElement) {\r\n    // Note that this is 'any focusable area'. This list is probably not exhaustive, but the\r\n    // alternative involves stepping through and trying to focus everything.\r\n    var opts = ['button', 'input', 'keygen', 'select', 'textarea'];\r\n    var query = opts.map(function(el) {\r\n      return el + ':not([disabled])';\r\n    });\r\n    // TODO(samthor): tabindex values that are not numeric are not focusable.\r\n    query.push('[tabindex]:not([disabled]):not([tabindex=\"\"])');  // tabindex != \"\", not disabled\r\n    var target = hostElement.querySelector(query.join(', '));\r\n\r\n    if (!target && 'attachShadow' in Element.prototype) {\r\n      // If we haven't found a focusable target, see if the host element contains an element\r\n      // which has a shadowRoot.\r\n      // Recursively search for the first focusable item in shadow roots.\r\n      var elems = hostElement.querySelectorAll('*');\r\n      for (var i = 0; i < elems.length; i++) {\r\n        if (elems[i].tagName && elems[i].shadowRoot) {\r\n          target = findFocusableElementWithin(elems[i].shadowRoot);\r\n          if (target) {\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return target;\r\n  }\r\n\r\n  /**\r\n   * Determines if an element is attached to the DOM.\r\n   * @param {Element} element to check\r\n   * @return {boolean} whether the element is in DOM\r\n   */\r\n  function isConnected(element) {\r\n    return element.isConnected || document.body.contains(element);\r\n  }\r\n\r\n  /**\r\n   * @param {!Event} event\r\n   * @return {?Element}\r\n   */\r\n  function findFormSubmitter(event) {\r\n    if (event.submitter) {\r\n      return event.submitter;\r\n    }\r\n\r\n    var form = event.target;\r\n    if (!(form instanceof HTMLFormElement)) {\r\n      return null;\r\n    }\r\n\r\n    var submitter = dialogPolyfill.formSubmitter;\r\n    if (!submitter) {\r\n      var target = event.target;\r\n      var root = ('getRootNode' in target && target.getRootNode() || document);\r\n      submitter = root.activeElement;\r\n    }\r\n\r\n    if (!submitter || submitter.form !== form) {\r\n      return null;\r\n    }\r\n    return submitter;\r\n  }\r\n\r\n  /**\r\n   * @param {!Event} event\r\n   */\r\n  function maybeHandleSubmit(event) {\r\n    if (event.defaultPrevented) {\r\n      return;\r\n    }\r\n    var form = /** @type {!HTMLFormElement} */ (event.target);\r\n\r\n    // We'd have a value if we clicked on an imagemap.\r\n    var value = dialogPolyfill.imagemapUseValue;\r\n    var submitter = findFormSubmitter(event);\r\n    if (value === null && submitter) {\r\n      value = submitter.value;\r\n    }\r\n\r\n    // There should always be a dialog as this handler is added specifically on them, but check just\r\n    // in case.\r\n    var dialog = findNearestDialog(form);\r\n    if (!dialog) {\r\n      return;\r\n    }\r\n\r\n    // Prefer formmethod on the button.\r\n    var formmethod = submitter && submitter.getAttribute('formmethod') || form.getAttribute('method');\r\n    if (formmethod !== 'dialog') {\r\n      return;\r\n    }\r\n    event.preventDefault();\r\n\r\n    if (value != null) {\r\n      // nb. we explicitly check against null/undefined\r\n      dialog.close(value);\r\n    } else {\r\n      dialog.close();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {!HTMLDialogElement} dialog to upgrade\r\n   * @constructor\r\n   */\r\n  function dialogPolyfillInfo(dialog) {\r\n    this.dialog_ = dialog;\r\n    this.replacedStyleTop_ = false;\r\n    this.openAsModal_ = false;\r\n\r\n    // Set a11y role. Browsers that support dialog implicitly know this already.\r\n    if (!dialog.hasAttribute('role')) {\r\n      dialog.setAttribute('role', 'dialog');\r\n    }\r\n\r\n    dialog.show = this.show.bind(this);\r\n    dialog.showModal = this.showModal.bind(this);\r\n    dialog.close = this.close.bind(this);\r\n\r\n    dialog.addEventListener('submit', maybeHandleSubmit, false);\r\n\r\n    if (!('returnValue' in dialog)) {\r\n      dialog.returnValue = '';\r\n    }\r\n\r\n    if ('MutationObserver' in window) {\r\n      var mo = new MutationObserver(this.maybeHideModal.bind(this));\r\n      mo.observe(dialog, {attributes: true, attributeFilter: ['open']});\r\n    } else {\r\n      // IE10 and below support. Note that DOMNodeRemoved etc fire _before_ removal. They also\r\n      // seem to fire even if the element was removed as part of a parent removal. Use the removed\r\n      // events to force downgrade (useful if removed/immediately added).\r\n      var removed = false;\r\n      var cb = function() {\r\n        removed ? this.downgradeModal() : this.maybeHideModal();\r\n        removed = false;\r\n      }.bind(this);\r\n      var timeout;\r\n      var delayModel = function(ev) {\r\n        if (ev.target !== dialog) { return; }  // not for a child element\r\n        var cand = 'DOMNodeRemoved';\r\n        removed |= (ev.type.substr(0, cand.length) === cand);\r\n        window.clearTimeout(timeout);\r\n        timeout = window.setTimeout(cb, 0);\r\n      };\r\n      ['DOMAttrModified', 'DOMNodeRemoved', 'DOMNodeRemovedFromDocument'].forEach(function(name) {\r\n        dialog.addEventListener(name, delayModel);\r\n      });\r\n    }\r\n    // Note that the DOM is observed inside DialogManager while any dialog\r\n    // is being displayed as a modal, to catch modal removal from the DOM.\r\n\r\n    Object.defineProperty(dialog, 'open', {\r\n      set: this.setOpen.bind(this),\r\n      get: dialog.hasAttribute.bind(dialog, 'open')\r\n    });\r\n\r\n    this.backdrop_ = document.createElement('div');\r\n    this.backdrop_.className = 'backdrop';\r\n    this.backdrop_.addEventListener('mouseup'  , this.backdropMouseEvent_.bind(this));\r\n    this.backdrop_.addEventListener('mousedown', this.backdropMouseEvent_.bind(this));\r\n    this.backdrop_.addEventListener('click'    , this.backdropMouseEvent_.bind(this));\r\n  }\r\n\r\n  dialogPolyfillInfo.prototype = /** @type {HTMLDialogElement.prototype} */ ({\r\n\r\n    get dialog() {\r\n      return this.dialog_;\r\n    },\r\n\r\n    /**\r\n     * Maybe remove this dialog from the modal top layer. This is called when\r\n     * a modal dialog may no longer be tenable, e.g., when the dialog is no\r\n     * longer open or is no longer part of the DOM.\r\n     */\r\n    maybeHideModal: function() {\r\n      if (this.dialog_.hasAttribute('open') && isConnected(this.dialog_)) { return; }\r\n      this.downgradeModal();\r\n    },\r\n\r\n    /**\r\n     * Remove this dialog from the modal top layer, leaving it as a non-modal.\r\n     */\r\n    downgradeModal: function() {\r\n      if (!this.openAsModal_) { return; }\r\n      this.openAsModal_ = false;\r\n      this.dialog_.style.zIndex = '';\r\n\r\n      // This won't match the native <dialog> exactly because if the user set top on a centered\r\n      // polyfill dialog, that top gets thrown away when the dialog is closed. Not sure it's\r\n      // possible to polyfill this perfectly.\r\n      if (this.replacedStyleTop_) {\r\n        this.dialog_.style.top = '';\r\n        this.replacedStyleTop_ = false;\r\n      }\r\n\r\n      // Clear the backdrop and remove from the manager.\r\n      this.backdrop_.parentNode && this.backdrop_.parentNode.removeChild(this.backdrop_);\r\n      dialogPolyfill.dm.removeDialog(this);\r\n    },\r\n\r\n    /**\r\n     * @param {boolean} value whether to open or close this dialog\r\n     */\r\n    setOpen: function(value) {\r\n      if (value) {\r\n        this.dialog_.hasAttribute('open') || this.dialog_.setAttribute('open', '');\r\n      } else {\r\n        this.dialog_.removeAttribute('open');\r\n        this.maybeHideModal();  // nb. redundant with MutationObserver\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Handles mouse events ('mouseup', 'mousedown', 'click') on the fake .backdrop element, redirecting them as if\r\n     * they were on the dialog itself.\r\n     *\r\n     * @param {!Event} e to redirect\r\n     */\r\n    backdropMouseEvent_: function(e) {\r\n      if (!this.dialog_.hasAttribute('tabindex')) {\r\n        // Clicking on the backdrop should move the implicit cursor, even if dialog cannot be\r\n        // focused. Create a fake thing to focus on. If the backdrop was _before_ the dialog, this\r\n        // would not be needed - clicks would move the implicit cursor there.\r\n        var fake = document.createElement('div');\r\n        this.dialog_.insertBefore(fake, this.dialog_.firstChild);\r\n        fake.tabIndex = -1;\r\n        fake.focus();\r\n        this.dialog_.removeChild(fake);\r\n      } else {\r\n        this.dialog_.focus();\r\n      }\r\n\r\n      var redirectedEvent = document.createEvent('MouseEvents');\r\n      redirectedEvent.initMouseEvent(e.type, e.bubbles, e.cancelable, window,\r\n          e.detail, e.screenX, e.screenY, e.clientX, e.clientY, e.ctrlKey,\r\n          e.altKey, e.shiftKey, e.metaKey, e.button, e.relatedTarget);\r\n      this.dialog_.dispatchEvent(redirectedEvent);\r\n      e.stopPropagation();\r\n    },\r\n\r\n    /**\r\n     * Focuses on the first focusable element within the dialog. This will always blur the current\r\n     * focus, even if nothing within the dialog is found.\r\n     */\r\n    focus_: function() {\r\n      // Find element with `autofocus` attribute, or fall back to the first form/tabindex control.\r\n      var target = this.dialog_.querySelector('[autofocus]:not([disabled])');\r\n      if (!target && this.dialog_.tabIndex >= 0) {\r\n        target = this.dialog_;\r\n      }\r\n      if (!target) {\r\n        target = findFocusableElementWithin(this.dialog_);\r\n      }\r\n      safeBlur(document.activeElement);\r\n      target && target.focus();\r\n    },\r\n\r\n    /**\r\n     * Sets the zIndex for the backdrop and dialog.\r\n     *\r\n     * @param {number} dialogZ\r\n     * @param {number} backdropZ\r\n     */\r\n    updateZIndex: function(dialogZ, backdropZ) {\r\n      if (dialogZ < backdropZ) {\r\n        throw new Error('dialogZ should never be < backdropZ');\r\n      }\r\n      this.dialog_.style.zIndex = dialogZ;\r\n      this.backdrop_.style.zIndex = backdropZ;\r\n    },\r\n\r\n    /**\r\n     * Shows the dialog. If the dialog is already open, this does nothing.\r\n     */\r\n    show: function() {\r\n      if (!this.dialog_.open) {\r\n        this.setOpen(true);\r\n        this.focus_();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Show this dialog modally.\r\n     */\r\n    showModal: function() {\r\n      if (this.dialog_.hasAttribute('open')) {\r\n        throw new Error('Failed to execute \\'showModal\\' on dialog: The element is already open, and therefore cannot be opened modally.');\r\n      }\r\n      if (!isConnected(this.dialog_)) {\r\n        throw new Error('Failed to execute \\'showModal\\' on dialog: The element is not in a Document.');\r\n      }\r\n      if (!dialogPolyfill.dm.pushDialog(this)) {\r\n        throw new Error('Failed to execute \\'showModal\\' on dialog: There are too many open modal dialogs.');\r\n      }\r\n\r\n      if (createsStackingContext(this.dialog_.parentElement)) {\r\n        console.warn('A dialog is being shown inside a stacking context. ' +\r\n            'This may cause it to be unusable. For more information, see this link: ' +\r\n            'https://github.com/GoogleChrome/dialog-polyfill/#stacking-context');\r\n      }\r\n\r\n      this.setOpen(true);\r\n      this.openAsModal_ = true;\r\n\r\n      // Optionally center vertically, relative to the current viewport.\r\n      if (dialogPolyfill.needsCentering(this.dialog_)) {\r\n        dialogPolyfill.reposition(this.dialog_);\r\n        this.replacedStyleTop_ = true;\r\n      } else {\r\n        this.replacedStyleTop_ = false;\r\n      }\r\n\r\n      // Insert backdrop.\r\n      this.dialog_.parentNode.insertBefore(this.backdrop_, this.dialog_.nextSibling);\r\n\r\n      // Focus on whatever inside the dialog.\r\n      this.focus_();\r\n    },\r\n\r\n    /**\r\n     * Closes this HTMLDialogElement. This is optional vs clearing the open\r\n     * attribute, however this fires a 'close' event.\r\n     *\r\n     * @param {string=} opt_returnValue to use as the returnValue\r\n     */\r\n    close: function(opt_returnValue) {\r\n      if (!this.dialog_.hasAttribute('open')) {\r\n        throw new Error('Failed to execute \\'close\\' on dialog: The element does not have an \\'open\\' attribute, and therefore cannot be closed.');\r\n      }\r\n      this.setOpen(false);\r\n\r\n      // Leave returnValue untouched in case it was set directly on the element\r\n      if (opt_returnValue !== undefined) {\r\n        this.dialog_.returnValue = opt_returnValue;\r\n      }\r\n\r\n      // Triggering \"close\" event for any attached listeners on the <dialog>.\r\n      var closeEvent = new supportCustomEvent('close', {\r\n        bubbles: false,\r\n        cancelable: false\r\n      });\r\n      safeDispatchEvent(this.dialog_, closeEvent);\r\n    }\r\n\r\n  });\r\n\r\n  var dialogPolyfill = {};\r\n\r\n  dialogPolyfill.reposition = function(element) {\r\n    var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;\r\n    var topValue = scrollTop + (window.innerHeight - element.offsetHeight) / 2;\r\n    element.style.top = Math.max(scrollTop, topValue) + 'px';\r\n  };\r\n\r\n  dialogPolyfill.isInlinePositionSetByStylesheet = function(element) {\r\n    for (var i = 0; i < document.styleSheets.length; ++i) {\r\n      var styleSheet = document.styleSheets[i];\r\n      var cssRules = null;\r\n      // Some browsers throw on cssRules.\r\n      try {\r\n        cssRules = styleSheet.cssRules;\r\n      } catch (e) {}\r\n      if (!cssRules) { continue; }\r\n      for (var j = 0; j < cssRules.length; ++j) {\r\n        var rule = cssRules[j];\r\n        var selectedNodes = null;\r\n        // Ignore errors on invalid selector texts.\r\n        try {\r\n          selectedNodes = document.querySelectorAll(rule.selectorText);\r\n        } catch(e) {}\r\n        if (!selectedNodes || !inNodeList(selectedNodes, element)) {\r\n          continue;\r\n        }\r\n        var cssTop = rule.style.getPropertyValue('top');\r\n        var cssBottom = rule.style.getPropertyValue('bottom');\r\n        if ((cssTop && cssTop !== 'auto') || (cssBottom && cssBottom !== 'auto')) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  dialogPolyfill.needsCentering = function(dialog) {\r\n    var computedStyle = window.getComputedStyle(dialog);\r\n    if (computedStyle.position !== 'absolute') {\r\n      return false;\r\n    }\r\n\r\n    // We must determine whether the top/bottom specified value is non-auto.  In\r\n    // WebKit/Blink, checking computedStyle.top == 'auto' is sufficient, but\r\n    // Firefox returns the used value. So we do this crazy thing instead: check\r\n    // the inline style and then go through CSS rules.\r\n    if ((dialog.style.top !== 'auto' && dialog.style.top !== '') ||\r\n        (dialog.style.bottom !== 'auto' && dialog.style.bottom !== '')) {\r\n      return false;\r\n    }\r\n    return !dialogPolyfill.isInlinePositionSetByStylesheet(dialog);\r\n  };\r\n\r\n  /**\r\n   * @param {!Element} element to force upgrade\r\n   */\r\n  dialogPolyfill.forceRegisterDialog = function(element) {\r\n    if (window.HTMLDialogElement || element.showModal) {\r\n      console.warn('This browser already supports <dialog>, the polyfill ' +\r\n          'may not work correctly', element);\r\n    }\r\n    if (element.localName !== 'dialog') {\r\n      throw new Error('Failed to register dialog: The element is not a dialog.');\r\n    }\r\n    new dialogPolyfillInfo(/** @type {!HTMLDialogElement} */ (element));\r\n  };\r\n\r\n  /**\r\n   * @param {!Element} element to upgrade, if necessary\r\n   */\r\n  dialogPolyfill.registerDialog = function(element) {\r\n    if (!element.showModal) {\r\n      dialogPolyfill.forceRegisterDialog(element);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * @constructor\r\n   */\r\n  dialogPolyfill.DialogManager = function() {\r\n    /** @type {!Array<!dialogPolyfillInfo>} */\r\n    this.pendingDialogStack = [];\r\n\r\n    var checkDOM = this.checkDOM_.bind(this);\r\n\r\n    // The overlay is used to simulate how a modal dialog blocks the document.\r\n    // The blocking dialog is positioned on top of the overlay, and the rest of\r\n    // the dialogs on the pending dialog stack are positioned below it. In the\r\n    // actual implementation, the modal dialog stacking is controlled by the\r\n    // top layer, where z-index has no effect.\r\n    this.overlay = document.createElement('div');\r\n    this.overlay.className = '_dialog_overlay';\r\n    this.overlay.addEventListener('click', function(e) {\r\n      this.forwardTab_ = undefined;\r\n      e.stopPropagation();\r\n      checkDOM([]);  // sanity-check DOM\r\n    }.bind(this));\r\n\r\n    this.handleKey_ = this.handleKey_.bind(this);\r\n    this.handleFocus_ = this.handleFocus_.bind(this);\r\n\r\n    this.zIndexLow_ = 100000;\r\n    this.zIndexHigh_ = 100000 + 150;\r\n\r\n    this.forwardTab_ = undefined;\r\n\r\n    if ('MutationObserver' in window) {\r\n      this.mo_ = new MutationObserver(function(records) {\r\n        var removed = [];\r\n        records.forEach(function(rec) {\r\n          for (var i = 0, c; c = rec.removedNodes[i]; ++i) {\r\n            if (!(c instanceof Element)) {\r\n              continue;\r\n            } else if (c.localName === 'dialog') {\r\n              removed.push(c);\r\n            }\r\n            removed = removed.concat(c.querySelectorAll('dialog'));\r\n          }\r\n        });\r\n        removed.length && checkDOM(removed);\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Called on the first modal dialog being shown. Adds the overlay and related\r\n   * handlers.\r\n   */\r\n  dialogPolyfill.DialogManager.prototype.blockDocument = function() {\r\n    document.documentElement.addEventListener('focus', this.handleFocus_, true);\r\n    document.addEventListener('keydown', this.handleKey_);\r\n    this.mo_ && this.mo_.observe(document, {childList: true, subtree: true});\r\n  };\r\n\r\n  /**\r\n   * Called on the first modal dialog being removed, i.e., when no more modal\r\n   * dialogs are visible.\r\n   */\r\n  dialogPolyfill.DialogManager.prototype.unblockDocument = function() {\r\n    document.documentElement.removeEventListener('focus', this.handleFocus_, true);\r\n    document.removeEventListener('keydown', this.handleKey_);\r\n    this.mo_ && this.mo_.disconnect();\r\n  };\r\n\r\n  /**\r\n   * Updates the stacking of all known dialogs.\r\n   */\r\n  dialogPolyfill.DialogManager.prototype.updateStacking = function() {\r\n    var zIndex = this.zIndexHigh_;\r\n\r\n    for (var i = 0, dpi; dpi = this.pendingDialogStack[i]; ++i) {\r\n      dpi.updateZIndex(--zIndex, --zIndex);\r\n      if (i === 0) {\r\n        this.overlay.style.zIndex = --zIndex;\r\n      }\r\n    }\r\n\r\n    // Make the overlay a sibling of the dialog itself.\r\n    var last = this.pendingDialogStack[0];\r\n    if (last) {\r\n      var p = last.dialog.parentNode || document.body;\r\n      p.appendChild(this.overlay);\r\n    } else if (this.overlay.parentNode) {\r\n      this.overlay.parentNode.removeChild(this.overlay);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * @param {Element} candidate to check if contained or is the top-most modal dialog\r\n   * @return {boolean} whether candidate is contained in top dialog\r\n   */\r\n  dialogPolyfill.DialogManager.prototype.containedByTopDialog_ = function(candidate) {\r\n    while (candidate = findNearestDialog(candidate)) {\r\n      for (var i = 0, dpi; dpi = this.pendingDialogStack[i]; ++i) {\r\n        if (dpi.dialog === candidate) {\r\n          return i === 0;  // only valid if top-most\r\n        }\r\n      }\r\n      candidate = candidate.parentElement;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  dialogPolyfill.DialogManager.prototype.handleFocus_ = function(event) {\r\n    var target = event.composedPath ? event.composedPath()[0] : event.target;\r\n\r\n    if (this.containedByTopDialog_(target)) { return; }\r\n\r\n    if (document.activeElement === document.documentElement) { return; }\r\n\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    safeBlur(/** @type {Element} */ (target));\r\n\r\n    if (this.forwardTab_ === undefined) { return; }  // move focus only from a tab key\r\n\r\n    var dpi = this.pendingDialogStack[0];\r\n    var dialog = dpi.dialog;\r\n    var position = dialog.compareDocumentPosition(target);\r\n    if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n      if (this.forwardTab_) {\r\n        // forward\r\n        dpi.focus_();\r\n      } else if (target !== document.documentElement) {\r\n        // backwards if we're not already focused on <html>\r\n        document.documentElement.focus();\r\n      }\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  dialogPolyfill.DialogManager.prototype.handleKey_ = function(event) {\r\n    this.forwardTab_ = undefined;\r\n    if (event.keyCode === 27) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n      var cancelEvent = new supportCustomEvent('cancel', {\r\n        bubbles: false,\r\n        cancelable: true\r\n      });\r\n      var dpi = this.pendingDialogStack[0];\r\n      if (dpi && safeDispatchEvent(dpi.dialog, cancelEvent)) {\r\n        dpi.dialog.close();\r\n      }\r\n    } else if (event.keyCode === 9) {\r\n      this.forwardTab_ = !event.shiftKey;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Finds and downgrades any known modal dialogs that are no longer displayed. Dialogs that are\r\n   * removed and immediately readded don't stay modal, they become normal.\r\n   *\r\n   * @param {!Array<!HTMLDialogElement>} removed that have definitely been removed\r\n   */\r\n  dialogPolyfill.DialogManager.prototype.checkDOM_ = function(removed) {\r\n    // This operates on a clone because it may cause it to change. Each change also calls\r\n    // updateStacking, which only actually needs to happen once. But who removes many modal dialogs\r\n    // at a time?!\r\n    var clone = this.pendingDialogStack.slice();\r\n    clone.forEach(function(dpi) {\r\n      if (removed.indexOf(dpi.dialog) !== -1) {\r\n        dpi.downgradeModal();\r\n      } else {\r\n        dpi.maybeHideModal();\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * @param {!dialogPolyfillInfo} dpi\r\n   * @return {boolean} whether the dialog was allowed\r\n   */\r\n  dialogPolyfill.DialogManager.prototype.pushDialog = function(dpi) {\r\n    var allowed = (this.zIndexHigh_ - this.zIndexLow_) / 2 - 1;\r\n    if (this.pendingDialogStack.length >= allowed) {\r\n      return false;\r\n    }\r\n    if (this.pendingDialogStack.unshift(dpi) === 1) {\r\n      this.blockDocument();\r\n    }\r\n    this.updateStacking();\r\n    return true;\r\n  };\r\n\r\n  /**\r\n   * @param {!dialogPolyfillInfo} dpi\r\n   */\r\n  dialogPolyfill.DialogManager.prototype.removeDialog = function(dpi) {\r\n    var index = this.pendingDialogStack.indexOf(dpi);\r\n    if (index === -1) { return; }\r\n\r\n    this.pendingDialogStack.splice(index, 1);\r\n    if (this.pendingDialogStack.length === 0) {\r\n      this.unblockDocument();\r\n    }\r\n    this.updateStacking();\r\n  };\r\n\r\n  dialogPolyfill.dm = new dialogPolyfill.DialogManager();\r\n  dialogPolyfill.formSubmitter = null;\r\n  dialogPolyfill.imagemapUseValue = null;\r\n\r\n  /**\r\n   * Installs global handlers, such as click listers and native method overrides. These are needed\r\n   * even if a no dialog is registered, as they deal with <form method=\"dialog\">.\r\n   */\r\n  if (window.HTMLDialogElement === undefined) {\r\n\r\n    /**\r\n     * If HTMLFormElement translates method=\"DIALOG\" into 'get', then replace the descriptor with\r\n     * one that returns the correct value.\r\n     */\r\n    var testForm = document.createElement('form');\r\n    testForm.setAttribute('method', 'dialog');\r\n    if (testForm.method !== 'dialog') {\r\n      var methodDescriptor = Object.getOwnPropertyDescriptor(HTMLFormElement.prototype, 'method');\r\n      if (methodDescriptor) {\r\n        // nb. Some older iOS and older PhantomJS fail to return the descriptor. Don't do anything\r\n        // and don't bother to update the element.\r\n        var realGet = methodDescriptor.get;\r\n        methodDescriptor.get = function() {\r\n          if (isFormMethodDialog(this)) {\r\n            return 'dialog';\r\n          }\r\n          return realGet.call(this);\r\n        };\r\n        var realSet = methodDescriptor.set;\r\n        /** @this {HTMLElement} */\r\n        methodDescriptor.set = function(v) {\r\n          if (typeof v === 'string' && v.toLowerCase() === 'dialog') {\r\n            return this.setAttribute('method', v);\r\n          }\r\n          return realSet.call(this, v);\r\n        };\r\n        Object.defineProperty(HTMLFormElement.prototype, 'method', methodDescriptor);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Global 'click' handler, to capture the <input type=\"submit\"> or <button> element which has\r\n     * submitted a <form method=\"dialog\">. Needed as Safari and others don't report this inside\r\n     * document.activeElement.\r\n     */\r\n    document.addEventListener('click', function(ev) {\r\n      dialogPolyfill.formSubmitter = null;\r\n      dialogPolyfill.imagemapUseValue = null;\r\n      if (ev.defaultPrevented) { return; }  // e.g. a submit which prevents default submission\r\n\r\n      var target = /** @type {Element} */ (ev.target);\r\n      if ('composedPath' in ev) {\r\n        var path = ev.composedPath();\r\n        target = path.shift() || target;\r\n      }\r\n      if (!target || !isFormMethodDialog(target.form)) { return; }\r\n\r\n      var valid = (target.type === 'submit' && ['button', 'input'].indexOf(target.localName) > -1);\r\n      if (!valid) {\r\n        if (!(target.localName === 'input' && target.type === 'image')) { return; }\r\n        // this is a <input type=\"image\">, which can submit forms\r\n        dialogPolyfill.imagemapUseValue = ev.offsetX + ',' + ev.offsetY;\r\n      }\r\n\r\n      var dialog = findNearestDialog(target);\r\n      if (!dialog) { return; }\r\n\r\n      dialogPolyfill.formSubmitter = target;\r\n\r\n    }, false);\r\n\r\n    /**\r\n     * Global 'submit' handler. This handles submits of `method=\"dialog\"` which are invalid, i.e.,\r\n     * outside a dialog. They get prevented.\r\n     */\r\n    document.addEventListener('submit', function(ev) {\r\n      var form = ev.target;\r\n      var dialog = findNearestDialog(form);\r\n      if (dialog) {\r\n        return;  // ignore, handle there\r\n      }\r\n\r\n      var submitter = findFormSubmitter(ev);\r\n      var formmethod = submitter && submitter.getAttribute('formmethod') || form.getAttribute('method');\r\n      if (formmethod === 'dialog') {\r\n        ev.preventDefault();\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Replace the native HTMLFormElement.submit() method, as it won't fire the\r\n     * submit event and give us a chance to respond.\r\n     */\r\n    var nativeFormSubmit = HTMLFormElement.prototype.submit;\r\n    var replacementFormSubmit = function () {\r\n      if (!isFormMethodDialog(this)) {\r\n        return nativeFormSubmit.call(this);\r\n      }\r\n      var dialog = findNearestDialog(this);\r\n      dialog && dialog.close();\r\n    };\r\n    HTMLFormElement.prototype.submit = replacementFormSubmit;\r\n  }\r\n\r\n  return dialogPolyfill;\r\n\r\n}));","import { confirmModal } from './modals.js';\r\n\r\n/**\r\n * @namespace FormValidator\r\n * Class representing a form validator.\r\n */\r\nexport default class FormValidator {\r\n  /**\r\n   * Create a form validator\r\n   * @param {HTMLElement} form - form node\r\n   * @param {Array} fields - IDs of form inputs\r\n   * @param {String} countryCode - area code to insert into formatPhoneNumber method's result\r\n   */\r\n  constructor(form, fields, countryCode) {\r\n    this.form = form;\r\n    this.fields = fields;\r\n    this.countryCode = countryCode;\r\n  }\r\n\r\n  /**\r\n   * @method initialize\r\n   * @description initializes form alidation on entry and submit, clears inputs\r\n   * @see {@link validateOnEntry}\r\n   * @see {@link validateOnSubmit}\r\n   * @see {@link clearField}\r\n   * @param {undefined}\r\n   * @returns {undefined}\r\n   */\r\n  initialize() {\r\n    this.validateOnEntry();\r\n    this.validateOnSubmit();\r\n    this.clearField();\r\n  }\r\n\r\n  /**\r\n   * @method validateOnSubmit\r\n   * @description validates form on submit by means of validateFields method\r\n   * @see {@link validateFields}\r\n   * @param {undefined}\r\n   * @returns {(false|Function)} depending on validateFields method's result\r\n   * either returns false or calls modal window and clears the input\r\n   */\r\n  validateOnSubmit() {\r\n    this.form.addEventListener('submit', event => {\r\n        event.preventDefault()\r\n        this.fields.forEach(field => {\r\n        const INPUT = document.querySelector(`#${field}`)\r\n        this.validateFields(INPUT);\r\n        if (INPUT.classList.contains('form__control--invalid')) {\r\n          return false;\r\n        } else {\r\n          INPUT.value = '';\r\n\r\n          /**\r\n           * @method validateOnEntry\r\n           * @description native method for closing modals wrapped in the polyfill\r\n           * @param {undefined}\r\n           * @returns {Void}\r\n           */\r\n          confirmModal.showModal();\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @method validateOnEntry\r\n   * @description validates form on entry by means of validateFields method\r\n   * also recieves formatted phone number from the formatPhoneNumber method\r\n   * @see {@link validateFields}\r\n   * @see {@link formatPhoneNumber}\r\n   * @param {undefined}\r\n   * @returns {undefined}\r\n   */\r\n  validateOnEntry() {\r\n    this.fields.forEach(field => {\r\n      const INPUT = document.querySelector(`#${field}`);\r\n      INPUT.addEventListener('input', event => {\r\n        INPUT.value = this.formatPhoneNumber(event.target.value);\r\n        this.validateFields(INPUT);\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @method formatPhoneNumber\r\n   * @description formats phone number on entry\r\n   * @param {String} input - user's entry\r\n   * @returns {String} formatted phone number as '{countryCode}(###)-###-##-##'\r\n   */\r\n  formatPhoneNumber(input) {\r\n    input = input.replace(/\\D/g,'');\r\n    let size = input.length;\r\n\r\n    if (size > 0) input = '(' + input;\r\n    if (size > 3) input = input.slice(0,4) + ')-' + input.slice(4,13);\r\n    if (size > 6) input = input.slice(0,9) + '-' + input.slice(9,11) + '-' + input.slice(11,13);    \r\n    if (size > 9) input = this.countryCode + input;\r\n\r\n    return input;\r\n  }\r\n\r\n  /**\r\n   * @method clearField\r\n   * @description erases user's entries on focus and backspace keydown events\r\n   * @param {undefined}\r\n   * @returns {undefined}\r\n   */\r\n  clearField() {\r\n    this.fields.forEach(field => {\r\n      const INPUT = document.querySelector(`#${field}`);\r\n      INPUT.addEventListener('focus', () => {\r\n        INPUT.value = '';\r\n      })\r\n      INPUT.addEventListener('keydown', (event) => {\r\n        if (event.keyCode === 8) INPUT.value = '';\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @method validateFields\r\n   * @description checks input on being empty and sends\r\n   * 'success' or 'error' status to setStatus method\r\n   * @see {@link setStatus}\r\n   * @param {HTMLElement} field - input node\r\n   * @returns {undefined}\r\n   */\r\n  validateFields(field) {\r\n    if (field.value.trim() === '') {\r\n      this.setStatus(field, 'error');\r\n    } else {\r\n      this.setStatus(field, 'success');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method setStatus\r\n   * @description depending on the received status,\r\n   * adds or removes '.form__control--invalid' class name to the input node\r\n   * @param {HTMLElement} field - input node\r\n   * @param {String} status - status received from the validateFields method\r\n   * @returns {undefined}\r\n   */\r\n  setStatus(field, status) {\r\n    if (status === 'success') {\r\n      field.classList.remove('form__control--invalid');\r\n    }\r\n\r\n    if (status === 'error') {\r\n      field.classList.add('form__control--invalid');\r\n    }\r\n  }\r\n}","/**\r\n * @namespace Gallery\r\n * Class representing a gallery.\r\n */\r\nclass Gallery {\r\n  /**\r\n   * Create a gallery.\r\n   * @param {HTMLElement} gallery - Gallery node\r\n   * @param {(Number|Boolean)} delay - setting a slideshow interval in milliseconds\r\n   * or switching it off by passing 'false'\r\n   */\r\n  constructor(gallery, delay) {\r\n    this.gallery = gallery;\r\n    this.activeIndex = 0;\r\n    this.numItems = this.gallery.children.length;\r\n    if(!delay) return;\r\n    this.delay = delay; \r\n    this.interval = setInterval(() => this.next(), delay);\r\n  }\r\n  \r\n  /**\r\n   * @method prev\r\n   * @description decreases activeIndex prop and initiates showSlide method\r\n   * @see {@link showSlide}\r\n   * @param {undefined}\r\n   * @returns {undefined}\r\n   */\r\n  prev() {\r\n    this.activeIndex--;\r\n    if(this.activeIndex < 0)\r\n      this.activeIndex = this.numItems - 1;\r\n    this.showSlide();\r\n  }\r\n  \r\n  /**\r\n   * @method next\r\n   * @description increases activeIndex prop and initiates showSlide method\r\n   * @see {@link showSlide}\r\n   * @param {undefined}\r\n   * @returns {undefined}\r\n   */\r\n  next() {\r\n    this.activeIndex++;\r\n    if(this.activeIndex >= this.numItems)\r\n      this.activeIndex = 0;\r\n    this.showSlide();\r\n  }\r\n  \r\n  /**\r\n   * @method showSlide\r\n   * @description calculates coordinates \r\n   * (current activeIndex * slide container's width)\r\n   * and shifts slides accordingly\r\n   * @param {undefined}\r\n   * @returns {undefined}\r\n   */\r\n  showSlide() {\r\n    let innerSpace = this.gallery.offsetWidth;\r\n\r\n    let coord = parseInt(`${this.activeIndex}` * innerSpace);\r\n    \r\n    this.gallery.scrollTo({\r\n      top: 0,\r\n      left: coord,\r\n      behavior: 'smooth'\r\n    });\r\n\r\n    return this.activeIndex;\r\n  }\r\n}\r\n\r\n/**\r\n * @namespace OwlCarousel\r\n * Class extending Gallery.\r\n * @memberof Gallery\r\n * @instance\r\n */\r\nclass OwlCarousel extends Gallery {\r\n  /**\r\n   * Create an instance of Gallery.\r\n   * @param {HTMLElement} gallery - Gallery node\r\n   * @param {(Number|Boolean)} delay - setting a slideshow interval in milliseconds\r\n   * or switching it off by passing 'false'\r\n   * @param {String} activeSlideClass - the active slide class name\r\n   * @param {HTMLCollection} pages - a collection of HTML pagination nodes\r\n   * @param {String} activePageClass - the active page class name\r\n   * @param {HTMLElement} counterCurrent - current count number node (optional)\r\n   * @param {(Boolean|undefined)} lightBox - lightBox gallery indicator (optional)\r\n   */\r\n  constructor(gallery, delay, activeSlideClass, pages, activePageClass, counterCurrent, lightBox) {\r\n    super(gallery, delay);\r\n    this.activeSlideClass = activeSlideClass;\r\n    this.slides = Array.from(this.gallery.children);\r\n    this.pages = Array.from(pages.children);\r\n    this.activePageClass = activePageClass;\r\n    if(!counterCurrent) return;\r\n    this.counterCurrent = counterCurrent;\r\n    if(!lightBox) return;\r\n    this.lightBox = lightBox;\r\n  }\r\n\r\n  /**\r\n   * @method prev\r\n   * @description decreases activeIndex prop and toggles between pages and slides,\r\n   * refreshes current slide number in the counter (optional)\r\n   * creates caption for lightBox photo gallery (optional)\r\n   * @see {@link toggleActive}\r\n   * @param {undefined}\r\n   * @returns {undefined}\r\n   */\r\n  prev() {\r\n    super.prev();\r\n    this.toggleActive(this.slides, this.activeSlideClass);\r\n    this.toggleActive(this.pages, this.activePageClass);\r\n    if(!this.counterCurrent) return;\r\n    this.countPages(this.counterCurrent);\r\n    if(!this.lightBox) return;\r\n    this.slides.forEach(slide => {\r\n      if(slide.classList.contains(this.activeSlideClass)) {\r\n        this.createCaption(slide.getAttribute('alt'), this.pages);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method next\r\n   * @description increases activeIndex prop and toggles between pages and slides,\r\n   * refreshes current slide number in the counter (optional)\r\n   * creates caption for lightBox photo gallery (optional)\r\n   * @see {@link toggleActive}\r\n   * @param {undefined}\r\n   * @returns {undefined}\r\n   */\r\n  next() {\r\n    super.next();\r\n    this.toggleActive(this.slides, this.activeSlideClass);\r\n    this.toggleActive(this.pages, this.activePageClass);\r\n    if(!this.counterCurrent) return;\r\n    this.countPages(this.counterCurrent);\r\n    if(!this.lightBox) return;\r\n    this.slides.forEach(slide => {\r\n      if(slide.classList.contains(this.activeSlideClass)) {\r\n        this.createCaption(slide.getAttribute('alt'), this.pages);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method toggleActive\r\n   * @description switches active class for slides and corresponding pages\r\n   * @param {Array} lists \r\n   * @param {String} activeClass \r\n   * @returns {undefined}\r\n   */\r\n  toggleActive(lists, activeClass) {\r\n    lists.forEach(listItem => {\r\n      listItem.classList.remove(activeClass);\r\n\r\n      if(listItem.dataset.id == this.activeIndex) {\r\n        listItem.classList.toggle(activeClass);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method navigatePage\r\n   * @description shows slide according to the clicked page,\r\n   * toggles between active pages and slides,\r\n   * refreshes current slide number in the counter (optional)\r\n   * creates caption for lightBox photo gallery (optional)\r\n   * @param {undefined}\r\n   * @returns {undefined}\r\n   */\r\n   navigatePage() {\r\n    this.pages.forEach(page => {\r\n      page.addEventListener('click', event => {\r\n        this.activeIndex = event.target.dataset.id;\r\n\r\n        super.showSlide();\r\n        this.toggleActive(this.slides, this.activeSlideClass);\r\n        this.toggleActive(this.pages, this.activePageClass);\r\n        if(!this.counterCurrent) return;\r\n        this.countPages(this.counterCurrent);\r\n        if(!this.lightBox) return;\r\n        this.createCaption(event.target.getAttribute('alt'), this.pages);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @method countPages\r\n   * @description calculates current slide number\r\n   * @param {HTMLElement} currentSlideNode - current count number node\r\n   * @returns {undefined}\r\n   */\r\n  countPages(currentSlideNode) {\r\n    currentSlideNode.textContent = parseInt(super.showSlide()) + 1;\r\n  }\r\n\r\n  /**\r\n   * @method countTotal\r\n   * @description calculates and inserts the total number of slides\r\n   * @param {HTMLElement} totalSlideNode - total slide number node\r\n   * @returns {undefined}\r\n   */\r\n  countTotal(totalSlideNode) {\r\n    totalSlideNode.textContent = this.numItems;\r\n  }\r\n\r\n  /**\r\n   * @method createCaption\r\n   * @description creates caption text for lightBox photo gallery\r\n   * @param {String} captionText - string taken from an image 'alt' attribute\r\n   * @param {HTMLElement} galleryContainer - container to append caption text to\r\n   */\r\n  createCaption(captionText, galleryContainer) {\r\n    if(!captionText || captionText.length < 2) captionText = 'Photo ' + parseInt(this.activeIndex + 1);\r\n    \r\n    let captionNode = document.querySelector('.gallery__caption');\r\n\r\n    if(!captionNode) {\r\n      captionNode = document.createElement('FIGCAPTION');\r\n      captionNode.appendChild(document.createTextNode(captionText));\r\n      captionNode.classList.add('gallery__caption');\r\n      captionNode.setAttribute('aria-live', 'polite');\r\n      galleryContainer.insertBefore(captionNode, galleryContainer.firstChild);\r\n    }\r\n\r\n    captionNode.textContent = captionText;\r\n  }\r\n}\r\n\r\nexport {Gallery, OwlCarousel};","/**\r\n * Polyfill for HTML <dialog> element\r\n * @constant\r\n * @default\r\n */\r\n const dialogPolyfill = require('./dialog-polyfill');\r\n\r\n /**\r\n  * @constant\r\n  * @default\r\n  * @member {HTMLElement}\r\n  */\r\n const confirmModal = document.querySelector('.modal--confirm');\r\n \r\n /**\r\n  * Register confirm modal node with dialog polyfill\r\n  * @constant\r\n  * @default\r\n  * @memberof dialogPolyfill\r\n  * @instance\r\n  */\r\n dialogPolyfill.registerDialog(confirmModal);\r\n\r\n /**\r\n * Variable containing array of modal buttons\r\n * @type {Array.<HTMLElement>}\r\n */\r\nlet cancelButtons = document.querySelectorAll('.modal--confirm .btn');\r\n\r\n/**\r\n * Close modal on click at any button from the array\r\n * @listens click\r\n * @fires confirmModal.close\r\n * @see {@link confirmModal.close}\r\n */\r\ncancelButtons.forEach(button => {\r\n  button.addEventListener('click', () => confirmModal.close());\r\n});\r\n\r\n\r\n/**\r\n * @constant\r\n * @default\r\n * @member {HTMLElement}\r\n */\r\nconst lightboxModal = document.querySelector('.modal--lightbox');\r\n  \r\n/**\r\n * Register lightbox modal node with dialog polyfill\r\n * @constant\r\n * @default\r\n * @memberof dialogPolyfill\r\n * @instance\r\n */\r\ndialogPolyfill.registerDialog(lightboxModal);\r\n \r\n/**\r\n * Variable for a lightBox modal close button\r\n * @member {HTMLElement}\r\n */\r\nlet lightboxCloseButton = document.querySelector('.modal--lightbox .btn--dismiss');\r\n\r\n/**\r\n * Close modal on click at close button\r\n * @listens click\r\n * @fires lightboxModal.close\r\n */\r\nlightboxCloseButton.addEventListener('click', () => lightboxModal.close());\r\n\r\n/**\r\n * @constant\r\n * @default\r\n * @member {HTMLElement}\r\n */\r\n const menuModal = document.querySelector('.modal--menu');\r\n\r\n /**\r\n * Register menu modal node with dialog polyfill\r\n * @constant\r\n * @default\r\n * @memberof dialogPolyfill\r\n * @instance\r\n */\r\ndialogPolyfill.registerDialog(menuModal);\r\n\r\n/**\r\n * Variable for a menu modal close button\r\n * @member {HTMLElement}\r\n */\r\n let menuCloseButton = document.querySelector('.modal--menu .btn--dismiss');\r\n\r\n /**\r\n * Variable for a menu modal items\r\n * @member {HTMLElement}\r\n */\r\n let menuItems = document.querySelectorAll('.modal--menu .navbar__item--modal');\r\n\r\n /**\r\n  * Close modal on click at close button\r\n  * @listens click\r\n  * @fires menuModal.close\r\n  */\r\n  menuCloseButton.addEventListener('click', () => menuModal.close());\r\n\r\n  /**\r\n  * Close modal on click at menu item\r\n  * @listens click\r\n  * @fires menuModal.close\r\n  */\r\n  menuItems.forEach(item => item.addEventListener('click', () => menuModal.close()));\r\n\r\nexport {confirmModal, lightboxModal, menuModal};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import '../styles/style.scss';\r\nimport { Gallery, OwlCarousel } from './gallery.js';\r\nimport FormValidator from './form.js';\r\nimport Accordion from './accordion.js';\r\nimport { lightboxModal, menuModal } from './modals.js';\r\n\r\n/**\r\n * @name IIFE\r\n * @function\r\n * @description self-executing anonymous function\r\n * that sets current year in a footer copyright section\r\n * @param {undefined}\r\n * @returns {undefined}\r\n */\r\n(() => {\r\n  let date = new Date(),\r\n      currentYearNode = document.querySelector('.copyright__year');\r\n\r\n  if (currentYearNode.textContent.length > 0) currentYearNode.textContent = '';\r\n\r\n  currentYearNode.appendChild(document.createTextNode(date.getFullYear()));\r\n})();\r\n\r\n/**\r\n * @function indexGalleries\r\n * @description enumerates slides and pages with the data-id attribute\r\n * @param {HTMLCollection} lists - a collection of HTML nodes\r\n * @returns {undefined}\r\n */\r\nconst indexGalleries = (lists) => {\r\n  lists = Array.from(lists.children);\r\n  lists.forEach((listItem, index) => listItem.setAttribute('data-id', `${index}`));\r\n}\r\n\r\n/**\r\n * Variable for a menu button\r\n * @member {HTMLElement}\r\n */\r\nlet menuButton = document.querySelector('.btn--menu');\r\n\r\n/**\r\n * Shows menu modal\r\n * @listens click\r\n * @fires menuModal.showModal\r\n */\r\nmenuButton.addEventListener('click', () => menuModal.showModal());\r\n\r\n/**\r\n * Variables for a snapshot gallery\r\n * @member {HTMLElement}\r\n */\r\nlet snapshotGallery = document.querySelector('.photoreport__snapshots'),\r\n    snapshots = document.querySelectorAll('.photoreport__snapshot'),\r\n    snapshotNext = document.querySelector('.gallery--photoreport .gallery__control--next'),\r\n    snapshotPrev = document.querySelector('.gallery--photoreport .gallery__control--prev'),\r\n    snapshotTotal = document.querySelector('.photoreport__total');\r\n\r\n/**\r\n * @constant\r\n * @default\r\n * @memberof Gallery\r\n * @instance\r\n */\r\nconst snapshotSlider = new Gallery(snapshotGallery, false);\r\n\r\n/**\r\n * Variable containing method to show next snapshotGallery slide\r\n * this method was saved to be able to refer to it while adding/removing listeners\r\n * @memberof Gallery\r\n */\r\nlet nextSnapshot = () => snapshotSlider.next();\r\n/**\r\n * Show next slide\r\n * @listens click\r\n * @fires next\r\n */\r\nsnapshotNext.addEventListener('click', nextSnapshot);\r\n\r\n/**\r\n * Variable containing method to show previous snapshotGallery slide\r\n * this method was saved to be able to refer to it while adding/removing listeners\r\n * @memberof Gallery\r\n */\r\nlet prevSnapshot = () => snapshotSlider.prev();\r\n/**\r\n * Show previous slide\r\n * @listens click\r\n * @fires prev\r\n */\r\nsnapshotPrev.addEventListener('click', prevSnapshot);\r\n\r\n/**\r\n * @function stopSnapshotGallery\r\n * @description erases timeout id and removes event listeners in snapshotGallery\r\n * if MediaQueryListEvent.matches === true\r\n * @param {Object} event - MediaQueryListEvent\r\n * @returns {undefined}\r\n */\r\nconst stopSnapshotGallery = (event) => {\r\n  if (event.matches) {\r\n    clearTimeout(snapshotSlider.interval);\r\n    snapshotNext.removeEventListener('click', nextSnapshot);\r\n    snapshotPrev.removeEventListener('click', prevSnapshot);\r\n  }\r\n}\r\n\r\n/**\r\n * Media query to control snapshotGallery\r\n * @constant\r\n * @default\r\n */\r\nconst mediumMedia = window.matchMedia('(min-width: 600px)');\r\n/**\r\n * Listens to the changing of the viewport min-width\r\n * @listens change\r\n * @fires stopSnapshotGallery\r\n * @see {@link stopSnapshotGallery}\r\n */\r\nmediumMedia.addEventListener('change', stopSnapshotGallery);\r\n\r\n/**\r\n * Inserts total amount of photos in a snapshot gallery\r\n */\r\nsnapshotTotal.innerText = snapshots.length;\r\n\r\n/**\r\n * Variables for a schedule gallery\r\n * @member {HTMLElement}\r\n */\r\nlet scheduleGallery = document.querySelector('.schedule__list'),\r\n    schedulePages = document.querySelector('.gallery--schedule .gallery__pagination'),\r\n    scheduleCountCurrent = document.querySelector('.gallery--schedule .gallery__current'),\r\n    scheduleCountTotal = document.querySelector('.gallery--schedule .gallery__total'),\r\n    scheduleNext = document.querySelector('.gallery--schedule .gallery__control--next'),\r\n    schedulePrev = document.querySelector('.gallery--schedule .gallery__control--prev');\r\n\r\n/**\r\n * Enumerated schedule gallery slides\r\n */\r\nindexGalleries(scheduleGallery);\r\n\r\n/**\r\n * Enumerated schedule gallery pages\r\n */\r\nindexGalleries(schedulePages);\r\n\r\n/**\r\n * @constant\r\n * @default\r\n * @memberof OwlCarousel\r\n * @instance\r\n */\r\nconst scheduleSlider = new OwlCarousel(\r\n        scheduleGallery,\r\n        false,\r\n        'gallery__slide--active',\r\n        schedulePages,\r\n        'gallery__page--active',\r\n        scheduleCountCurrent);\r\n\r\n/**\r\n * Show next schedule gallery slide\r\n * @listens click\r\n * @fires next\r\n */\r\nscheduleNext.addEventListener('click', () => scheduleSlider.next());\r\n/**\r\n * Show previous schedule gallery slide\r\n * @listens click\r\n * @fires prev\r\n */\r\nschedulePrev.addEventListener('click', () => scheduleSlider.prev());\r\n\r\n/**\r\n * Enables page navigation\r\n */\r\nscheduleSlider.navigatePage();\r\n\r\n/**\r\n * Inserts total amount of slides\r\n */\r\nscheduleSlider.countTotal(scheduleCountTotal);\r\n/**\r\n * Inserts starting slide number\r\n */\r\nscheduleSlider.countPages(scheduleCountCurrent);\r\n\r\n/**\r\n * @constant\r\n * @default\r\n * @member {HTMLElement}\r\n */\r\nconst FORM = document.getElementById('callback-form');\r\n/**\r\n * @constant\r\n * @default\r\n * @type {Array.<string>}\r\n */\r\nconst FIELDS = ['phone-number'];\r\n\r\n/**\r\n * @constant\r\n * @default\r\n * @memberof FormValidator\r\n * @instance\r\n */\r\nconst entryValidator = new FormValidator(FORM, FIELDS, '+1');\r\n/**\r\n * Initializes form validation\r\n */\r\nentryValidator.initialize();\r\n\r\n/**\r\n * Initiates an accordion animation in FAQ section\r\n */\r\ndocument.querySelectorAll('details').forEach((el) => {\r\n  new Accordion(el);\r\n});\r\n\r\n/**\r\n * Variables for a lightBox photo gallery\r\n * @member {HTMLElement}\r\n */\r\n let lightboxGallery = document.querySelector('.gallery--lightbox .gallery__fullsized'),\r\n     lightboxThumbs = document.querySelector('.gallery--lightbox .gallery__thumbs'),\r\n     lightboxCountCurrent = document.querySelector('.gallery--lightbox .gallery__current'),\r\n     lightboxCountTotal = document.querySelector('.gallery--lightbox .gallery__total'),\r\n     lightboxNext = document.querySelector('.gallery--lightbox .gallery__control--next'),\r\n     lightboxPrev = document.querySelector('.gallery--lightbox .gallery__control--prev'),\r\n     lightboxInit = document.querySelector('.gallery__slideshow');\r\n\r\n/**\r\n * Enumerated lightBox photo gallery slides\r\n */\r\nindexGalleries(lightboxGallery);\r\n\r\n/**\r\n * Enumerated lightBox photo gallery thumbnails\r\n */\r\nindexGalleries(lightboxThumbs);\r\n\r\n/**\r\n * @constant\r\n * @default\r\n * @memberof OwlCarousel\r\n * @instance\r\n */\r\nconst lightboxSlider = new OwlCarousel(\r\n     lightboxGallery,\r\n     false,\r\n     'gallery__slide--active',\r\n     lightboxThumbs,\r\n     'gallery__thumb--active',\r\n     lightboxCountCurrent,\r\n     true);\r\n\r\n/**\r\n * Show next lightBox photo gallery slide\r\n * @listens click\r\n * @fires next\r\n */\r\nlightboxNext.addEventListener('click', () => lightboxSlider.next());\r\n/**\r\n * Show previous lightBox photo gallery slide\r\n * @listens click\r\n * @fires prev\r\n */\r\nlightboxPrev.addEventListener('click', () => lightboxSlider.prev());\r\n\r\n/**\r\n * Enables thumbnail navigation\r\n */\r\nlightboxSlider.navigatePage();\r\n\r\n/**\r\n * Inserts total amount of lightBox photo gallery slides\r\n */\r\nlightboxSlider.countTotal(lightboxCountTotal);\r\n/**\r\n * Inserts starting lightBox photo gallery slide number\r\n */\r\nlightboxSlider.countPages(lightboxCountCurrent);\r\n\r\n/**\r\n * Creates initial caption for lightBox photo gallery\r\n */\r\nlightboxSlider.createCaption(lightboxThumbs.children[0].getAttribute('alt'), lightboxThumbs);\r\n\r\n/**\r\n * Distribute event listeners across all tiles in photoreport section\r\n */\r\nsnapshots.forEach((snapshot, index) => {\r\n  snapshot.addEventListener('click', (event) => {\r\n    lightboxModal.showModal();\r\n    lightboxSlider.activeIndex = index;\r\n    lightboxSlider.showSlide();\r\n    lightboxSlider.countPages(lightboxCountCurrent);\r\n    lightboxSlider.toggleActive(lightboxSlider.pages, lightboxSlider.activePageClass);\r\n    lightboxSlider.createCaption(event.target.getAttribute('alt'), lightboxThumbs);\r\n  });\r\n});\r\n\r\n/**\r\n * Show lightbox modal by clicking on 'All photos' link\r\n */\r\nlightboxInit.addEventListener('click', (event) => {\r\n  event.preventDefault();\r\n  lightboxModal.showModal();\r\n});"],"names":[],"sourceRoot":""}